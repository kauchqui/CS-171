import java.util.ArrayDeque;



public class UserProfile {
	private Node[] nodes;
	private static final int MAX_CAPACITY = 41;
	private Node rootNode;
	public UserProfile() {
		nodes = new Node[MAX_CAPACITY];
	}
	
	
	
	/**
	 * If key is a non-null object then return the hash code of key modulo hash map size as value. If key is null then return 0.
	 * 
	 * @param key
	 * @return hash
	 */
	public int getHash(String key) {
		
		if(key == null) {
			return 0;
		}
		String newKey = key.substring(0, Math.min(key.length(), 4));

		int hash = newKey.hashCode();

		hash = hash % MAX_CAPACITY;
		
		return hash;
	}
	
	/**
	 * In case of collisions, put the new key-value pair in a BST based on key comparisons.
	 * 
	 * @param key
	 * @param value
	 */
	public void put(String key, String value, users user) {
		
		int hashOfKey = getHash(key);
		
		final Node newNode = new Node(key, value, user, null);
		
		if(nodes[hashOfKey] == null) {
			
			nodes[hashOfKey] = newNode;
		} else {

			Node root = nodes[hashOfKey];
			
			try {
				addToBSTBucket(root, newNode);
			} catch(Exception e ) {
				e.printStackTrace();
			}
		}
		
	}
	
	/**
	 * If a collision happens while adding a node to Hashmap, add new node to the hashed bucket represented with a BST.
	 * 
	 * @param root		root of BST bucket
	 * @param newNode 	New Node to be added in BST bucket
	 */
	private void addToBSTBucket(Node root, final Node newNode) {
		
		if(root == null) {
			root = newNode;
			this.rootNode = newNode;
			return;
			
		}
		
		Node currentNode = root;
		Node parentNode = root;
		
		while(true) {
			
			parentNode = currentNode;
			
			if(newNode.key.compareTo(currentNode.key) == 0) {
				
				// if key values are same then just overwrite the vale in same node as duplicate keys are not allowed in this map
				currentNode.value = newNode.value;
				return;
				
			} else if(newNode.key.compareTo(currentNode.key) < 0) {
				currentNode = currentNode.left;
				
				if(currentNode == null) {
					parentNode.left = newNode;
					return;
				}
			} else {
				
				currentNode = currentNode.right;
				
				if(currentNode == null) {
					parentNode.right = newNode;
					return;
				}
			} 
		}
		
	}
	
	/**
	 * Get the value for a particular key. If no key found then return null.
	 * 
	 * @param key
	 * @return value or null
	 */
	public String get(String key) {
		
		Node node = nodes[getHash(key)];
		
		if(node != null) {
			return getValueFromBST(node, key);
		}
		
		return null;
	}
	
	private String getValueFromBST(Node root, String key) {
		
		if(key == null) {
			return null;
		}
		
		while(root != null) {
			if(key.equals(root.key)) {
				return root.value;
			} else if(key.compareTo(root.key) < 0) {
				root = root.left;
			} else {
				root = root.right;
			}
		}
		
		return null;	
	}
public users user(String key) {
		
		Node node = nodes[getHash(key)];
		
		if(node != null) {
			return getUserInfo(node, key);
		}
		
		return null;
	}
private users getUserInfo(Node root, String key) {
		
		if(key == null) {
			return null;
		}
		
		while(root != null) {
			if(key.equals(root.key)) {
				return root.user;
			} else if(key.compareTo(root.key) < 0) {
				root = root.left;
			} else {
				root = root.right;
			}
		}
		
		return null;	
	}
	private static class Node {
		
		private String key;
		private String value;
		private Node left;
		private Node right;
		private users user;
		private int data;
		Node parent;
		
		public Node(String key, String value, users user) 
		{
			this.key = key;
			this.value = value;
			this.user = user;
		
		}
		public Node(String key, String value, users user, Node p)
		{
			this.key = key;
			this.value = value;
			this.user = user;
			parent = p;
		}
		
	}
	
	Node findLCA(String key1, String key2){
		return findLCA(rootNode, key1, key2);
	}

	Node findLCA(Node node, String key1, String key2){
		if (node == null)
			return null;
		if (node.key == key1 || node.key == key2)
			return node;
		Node left_lca = findLCA(node.left, key1, key2);
		Node right_lca = findLCA(node.right, key1, key2);
		
		if(left_lca != null && right_lca != null)
			return node;
		
		return (left_lca != null) ? left_lca : right_lca;
	}
 
        private Node[] getShortestPath(String key1, String key2) {
        Node finPath[] = new Node[20];
        int inc = 0;
		if(key1 == null || key2 == null) {
			return null;
		}
		if (key1 == key2){
			return null;
		}
	
		//change conditional
	
			if(key1.equals(rootNode.key)) 
			{
				finPath[inc] = rootNode;
				inc++;
				
				while(rootNode != null)
				{
	
				/*if(key2.equals(rootNode.key))
				{
					finPath[inc] = rootNode;
					rootNode = null;
				}*/
				if(key2.compareTo(rootNode.key)<0)
			 	{
				rootNode = rootNode.left;
				finPath[inc] = rootNode;
				inc++;
				} 	
				else 
				{
				rootNode = rootNode.right;
				finPath[inc] = rootNode;
				inc++;
				}
				}
				return finPath;
			}
			else if(key2.equals(rootNode.key)) 
			{
				finPath[inc] = rootNode;
				inc++;
				
				while(rootNode != null)
				{
					/*if(key1.equals(rootNode.key))
					{
						finPath[inc] = rootNode;
						rootNode = null;
					}*/
				if(key1.compareTo(rootNode.key) < 0)
			 	{
				rootNode = rootNode.left;
				finPath[inc] = rootNode;
				inc++;
				} 	
				else 
				{
				rootNode = rootNode.right;
				finPath[inc] = rootNode;
				inc++;
				}
				}
				return finPath;
			}
			else 
			{
				Node lca = findLCA(key1, key2);
				
				int node1 = 0;
				int node2 = 0;
				while(node1 == 0)
				{
					if(key1.equals(lca.key))
					{
						finPath[inc] = lca;
						node1=-1;
					}
					else if(!key1.equals(lca.key))
					{
						finPath[inc] = lca;
						inc++;
						if(key1.compareTo(lca.key) < 0)
						{
						lca = lca.left;
						inc++;
						} 	
						else 
						{
							lca = lca.right;
							inc++;
						}
					}
					
					
					}
				while(node2 == 0)
				{
					if(key2.equals(lca.key))
					{
						finPath[inc] = lca;
						node1=-1;
					}
					else if(!key2.equals(lca.key))
					{
						finPath[inc] = lca;
						inc++;
						if(key2.compareTo(lca.key) < 0)
						{
						lca = lca.left;
						inc++;
						} 	
						else 
						{
							lca = lca.right;
							inc++;
						}
					}
					
					
					}
				return finPath;
			}
		
			
	}
        
        public void printShort(String key1, String key2)
        {
        	Node[] path = getShortestPath(key1, key2);
        	int x = path.length;
        	for(int i = 0; i < x; i++){
        		System.out.println(path[i].key);
        	}
        }
/*
     while(queueList.isEmpty() == false){
     	Position pos = queueList.removeLast();
     	if(pos.i == maze.length-1 && pos.j == maze[0].length-1){
     		for(int row =0; row <maze.length; row++){
     			for(int col =0; col<maze[0].length; col++){
     			if(maze[row][col] != '1'){
     				maze[row][col] = '0';
     			}
     			}
     		}
     		maze[0][0] = 'X';
     		maze[pos.i][pos.j] = 'X';
     		Position finPath[] = new Position[maze[0].length*maze[0].length];
     		finPath[0] = pos;
     		int inc = 0;
     		pos = pos.parent;
     		
     		while(pos != null) {
     			maze[pos.i][pos.j] = 'X';
     			finPath[inc] = pos;
     			pos = pos.parent;
     			inc++;
     			
     		}
     		return finPath;
     	} else {
     		maze[pos.i][pos.j] = 'X';
     		if(pos.i+1< maze[0].length && maze[pos.i+1][pos.j] == '0') {
     			Position addPos = new Position(pos.i+1, pos.j, '0', pos);
     		 	queueList.addFirst(addPos);
			}
			if(pos.j+1<maze.length && maze[pos.i][pos.j+1] == '0'){
				Position addPos = new Position(pos.i,pos.j+1,'0',pos);
				queueList.addFirst(addPos);
			}
			if(pos.j-1>-1 && maze[pos.i][pos.j-1] == '0') {
				Position addPos = new Position(pos.i,pos.j-1,'0',pos);
				queueList.addFirst(addPos);
			}
			if(pos.i-1>-1 && maze[pos.i-1][pos.j] == '0'){
				Position addPos = new Position(pos.i-1,pos.j,'0',pos);
				queueList.addFirst(addPos);
			}
     	}
     }
     throw new NullPointerException("No path available!");
		
}
*/
}
